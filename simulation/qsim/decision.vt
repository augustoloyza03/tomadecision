// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2024 16:23:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decisionfinal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decisionfinal_vlg_sample_tst(
	clk,
	O0,
	O1,
	reset,
	V0,
	V1,
	V2,
	V3,
	sampler_tx
);
input  clk;
input  O0;
input  O1;
input  reset;
input [3:0] V0;
input [3:0] V1;
input [3:0] V2;
input [3:0] V3;
output sampler_tx;

reg sample;
time current_time;
always @(clk or O0 or O1 or reset or V0 or V1 or V2 or V3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decisionfinal_vlg_check_tst (
	ea,
	eg,
	GD,
	GI,
	sampler_rx
);
input  ea;
input  eg;
input  GD;
input  GI;
input sampler_rx;

reg  ea_expected;
reg  eg_expected;
reg  GD_expected;
reg  GI_expected;

reg  ea_prev;
reg  eg_prev;
reg  GD_prev;
reg  GI_prev;

reg  ea_expected_prev;
reg  eg_expected_prev;
reg  GD_expected_prev;
reg  GI_expected_prev;

reg  last_ea_exp;
reg  last_eg_exp;
reg  last_GD_exp;
reg  last_GI_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ea_prev = ea;
	eg_prev = eg;
	GD_prev = GD;
	GI_prev = GI;
end

// update expected /o prevs

always @(trigger)
begin
	ea_expected_prev = ea_expected;
	eg_expected_prev = eg_expected;
	GD_expected_prev = GD_expected;
	GI_expected_prev = GI_expected;
end



// expected ea
initial
begin
	ea_expected = 1'bX;
end 

// expected eg
initial
begin
	eg_expected = 1'bX;
end 

// expected GD
initial
begin
	GD_expected = 1'bX;
end 

// expected GI
initial
begin
	GI_expected = 1'bX;
end 
// generate trigger
always @(ea_expected or ea or eg_expected or eg or GD_expected or GD or GI_expected or GI)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ea = %b | expected eg = %b | expected GD = %b | expected GI = %b | ",ea_expected_prev,eg_expected_prev,GD_expected_prev,GI_expected_prev);
	$display("| real ea = %b | real eg = %b | real GD = %b | real GI = %b | ",ea_prev,eg_prev,GD_prev,GI_prev);
`endif
	if (
		( ea_expected_prev !== 1'bx ) && ( ea_prev !== ea_expected_prev )
		&& ((ea_expected_prev !== last_ea_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ea :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ea_expected_prev);
		$display ("     Real value = %b", ea_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ea_exp = ea_expected_prev;
	end
	if (
		( eg_expected_prev !== 1'bx ) && ( eg_prev !== eg_expected_prev )
		&& ((eg_expected_prev !== last_eg_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eg_expected_prev);
		$display ("     Real value = %b", eg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_eg_exp = eg_expected_prev;
	end
	if (
		( GD_expected_prev !== 1'bx ) && ( GD_prev !== GD_expected_prev )
		&& ((GD_expected_prev !== last_GD_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GD_expected_prev);
		$display ("     Real value = %b", GD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_GD_exp = GD_expected_prev;
	end
	if (
		( GI_expected_prev !== 1'bx ) && ( GI_prev !== GI_expected_prev )
		&& ((GI_expected_prev !== last_GI_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GI_expected_prev);
		$display ("     Real value = %b", GI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_GI_exp = GI_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decisionfinal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg O0;
reg O1;
reg reset;
reg [3:0] V0;
reg [3:0] V1;
reg [3:0] V2;
reg [3:0] V3;
// wires                                               
wire ea;
wire eg;
wire GD;
wire GI;

wire sampler;                             

// assign statements (if any)                          
decisionfinal i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.ea(ea),
	.eg(eg),
	.GD(GD),
	.GI(GI),
	.O0(O0),
	.O1(O1),
	.reset(reset),
	.V0(V0),
	.V1(V1),
	.V2(V2),
	.V3(V3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// O0
initial
begin
	O0 = 1'b1;
end 

// O1
initial
begin
	O1 = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// V0[ 3 ]
initial
begin
	V0[3] = 1'b1;
end 
// V0[ 2 ]
initial
begin
	V0[2] = 1'b1;
end 
// V0[ 1 ]
initial
begin
	V0[1] = 1'b1;
end 
// V0[ 0 ]
initial
begin
	V0[0] = 1'b1;
end 
// V1[ 3 ]
initial
begin
	V1[3] = 1'b1;
end 
// V1[ 2 ]
initial
begin
	V1[2] = 1'b1;
end 
// V1[ 1 ]
initial
begin
	V1[1] = 1'b1;
end 
// V1[ 0 ]
initial
begin
	V1[0] = 1'b1;
end 
// V2[ 3 ]
initial
begin
	V2[3] = 1'b1;
end 
// V2[ 2 ]
initial
begin
	V2[2] = 1'b1;
end 
// V2[ 1 ]
initial
begin
	V2[1] = 1'b1;
end 
// V2[ 0 ]
initial
begin
	V2[0] = 1'b1;
end 
// V3[ 3 ]
initial
begin
	V3[3] = 1'b0;
end 
// V3[ 2 ]
initial
begin
	V3[2] = 1'b0;
end 
// V3[ 1 ]
initial
begin
	V3[1] = 1'b0;
end 
// V3[ 0 ]
initial
begin
	V3[0] = 1'b0;
end 

decisionfinal_vlg_sample_tst tb_sample (
	.clk(clk),
	.O0(O0),
	.O1(O1),
	.reset(reset),
	.V0(V0),
	.V1(V1),
	.V2(V2),
	.V3(V3),
	.sampler_tx(sampler)
);

decisionfinal_vlg_check_tst tb_out(
	.ea(ea),
	.eg(eg),
	.GD(GD),
	.GI(GI),
	.sampler_rx(sampler)
);
endmodule

